#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Replit
"""

import asyncio
import sys
import os
import subprocess
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

async def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from supabase_client import supabase_client
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = ['admin_users', 'courses', 'lessons', 'tests', 'students', 'team_members', 'qa_questions']
        
        for table in tables:
            count = await supabase_client.count_records(table)
            print(f"   {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
        admin = await supabase_client.find_one("admin_users", {"username": "admin"})
        if admin:
            print(f"‚úÖ –ê–¥–º–∏–Ω –Ω–∞–π–¥–µ–Ω: {admin['email']}")
        else:
            print("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

async def test_admin_authentication():
    """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    try:
        # –ß–∏—Ç–∞–µ–º URL –∏–∑ frontend .env
        with open('frontend/.env', 'r') as f:
            env_content = f.read()
            backend_url = None
            for line in env_content.split('\n'):
                if line.startswith('REACT_APP_BACKEND_URL='):
                    backend_url = line.split('=', 1)[1].strip()
                    break
        
        if not backend_url:
            print("‚ùå Backend URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω –ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ curl
        cmd = [
            'curl', '-s', '-X', 'POST',
            f"{backend_url}/api/admin/login",
            '-H', 'Content-Type: application/json',
            '-d', '{"username":"admin","password":"admin123"}'
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=15)
        
        if result.returncode == 0:
            try:
                response = json.loads(result.stdout)
                if 'access_token' in response:
                    print("‚úÖ –ê–¥–º–∏–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return True
                else:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
                    return False
            except json.JSONDecodeError:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç–≤–µ—Ç: {result.stdout}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

async def test_api_endpoints():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º backend URL
        with open('frontend/.env', 'r') as f:
            env_content = f.read()
            backend_url = None
            for line in env_content.split('\n'):
                if line.startswith('REACT_APP_BACKEND_URL='):
                    backend_url = line.split('=', 1)[1].strip()
                    break
        
        if not backend_url:
            print("‚ùå Backend URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        endpoints = [
            '/api/',
            '/api/courses',
            '/api/team',
            '/api/qa/questions',
            '/api/leaderboard'
        ]
        
        success_count = 0
        for endpoint in endpoints:
            cmd = ['curl', '-s', '-w', '%{http_code}', f"{backend_url}{endpoint}"]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                # –ü–æ–ª—É—á–∞–µ–º HTTP –∫–æ–¥ –∏–∑ –∫–æ–Ω—Ü–∞ –æ—Ç–≤–µ—Ç–∞
                response = result.stdout
                if len(response) >= 3:
                    http_code = response[-3:]
                    if http_code.startswith('2'):  # 2xx —Å—Ç–∞—Ç—É—Å
                        print(f"‚úÖ {endpoint} ‚Üí {http_code}")
                        success_count += 1
                    else:
                        print(f"‚ö†Ô∏è  {endpoint} ‚Üí {http_code}")
                else:
                    print(f"‚ùå {endpoint} ‚Üí –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            else:
                print(f"‚ùå {endpoint} ‚Üí –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        return success_count >= len(endpoints) // 2  # –•–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False

def test_file_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'backend/server.py',
        'backend/supabase_client.py',
        'backend/models.py',
        'backend/.env',
        'frontend/package.json',
        'frontend/.env',
        'frontend/src/App.js',
        '.replit',
        'replit.nix',
        'setup-replit.sh',
        'init_database.py'
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path}")
            missing_files.append(file_path)
    
    return len(missing_files) == 0

def test_dependencies():
    """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    python_deps = ['fastapi', 'supabase', 'pydantic', 'uvicorn']
    python_ok = True
    
    for dep in python_deps:
        try:
            __import__(dep)
            print(f"‚úÖ Python: {dep}")
        except ImportError:
            print(f"‚ùå Python: {dep}")
            python_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    node_ok = os.path.exists('frontend/node_modules')
    if node_ok:
        print("‚úÖ Node.js: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        print("‚ùå Node.js: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    return python_ok and node_ok

async def run_full_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ '–£—Ä–æ–∫–∏ –ò—Å–ª–∞–º–∞'")
    print("=" * 60)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure()),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", test_dependencies()),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", await test_database_connection()),
        ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", await test_api_endpoints()),
        ("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", await test_admin_authentication())
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, result in tests:
        if result:
            passed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        print("2. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω: admin@uroki-islama.ru / admin123")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–π—Ç–∞")
        print("4. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –æ–±—É—á–µ–Ω–∏–µ–º!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not tests[0][1]:  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub")
        if not tests[1][1]:  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            print("- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Replit –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        if not tests[2][1]:  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            print("- –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python init_database.py")
        if not tests[3][1]:  # API
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –≤ frontend/.env")
        if not tests[4][1]:  # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            print("- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        return False

if __name__ == "__main__":
    success = asyncio.run(run_full_test())
    sys.exit(0 if success else 1)