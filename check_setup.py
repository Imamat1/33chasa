#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Replit
"""

import asyncio
import sys
import os
import requests
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    replit_vars = ['REPL_SLUG', 'REPL_OWNER', 'REPLIT_DEV_DOMAIN']
    found_vars = []
    
    for var in replit_vars:
        if os.getenv(var):
            found_vars.append(f"{var}={os.getenv(var)}")
    
    if found_vars:
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Replit –Ω–∞–π–¥–µ–Ω—ã:")
        for var in found_vars:
            print(f"   {var}")
    else:
        print("‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Replit –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'backend/server.py',
        'backend/supabase_client.py',
        'backend/models.py',
        'backend/.env',
        'frontend/package.json',
        'frontend/.env',
        '.replit',
        'replit.nix',
        'setup-replit.sh'
    ]
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –ø–∞–∫–µ—Ç—ã
    try:
        import fastapi
        import supabase
        import pydantic
        print("‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if os.path.exists('frontend/node_modules'):
        print("‚úÖ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        print("‚ùå Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

async def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from supabase_client import supabase_client
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        admin_count = await supabase_client.count_records("admin_users")
        courses_count = await supabase_client.count_records("courses")
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        print(f"   –ê–¥–º–∏–Ω–æ–≤: {admin_count}")
        print(f"   –ö—É—Ä—Å–æ–≤: {courses_count}")
        
        if admin_count == 0 or courses_count == 0:
            print("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python init_database.py")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

def check_processes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º supervisor
        result = subprocess.run(['supervisorctl', 'status'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ Supervisor —Ä–∞–±–æ—Ç–∞–µ—Ç:")
            for line in result.stdout.strip().split('\n'):
                if line.strip():
                    print(f"   {line}")
        else:
            print("‚ùå Supervisor –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ supervisor: {e}")

def check_urls():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ URL...")
    
    # –ß–∏—Ç–∞–µ–º URL –∏–∑ frontend .env
    try:
        with open('frontend/.env', 'r') as f:
            env_content = f.read()
            for line in env_content.split('\n'):
                if line.startswith('REACT_APP_BACKEND_URL='):
                    backend_url = line.split('=', 1)[1].strip()
                    print(f"üîó Backend URL: {backend_url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
                    try:
                        response = requests.get(f"{backend_url}/api/", timeout=10)
                        if response.status_code == 200:
                            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                        else:
                            print(f"‚ö†Ô∏è  API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                    except Exception as e:
                        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    break
        else:
            print("‚ùå REACT_APP_BACKEND_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ frontend/.env")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è frontend/.env: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ '–£—Ä–æ–∫–∏ –ò—Å–ª–∞–º–∞'")
    print("=" * 50)
    
    check_environment()
    check_files()
    check_dependencies()
    await check_database()
    check_processes()
    check_urls()
    
    print("\n" + "=" * 50)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:")
    print("1. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ - –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö")
    print("2. –ï—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python init_database.py")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Replit (–∫–Ω–æ–ø–∫–∞ Run)")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")

if __name__ == "__main__":
    asyncio.run(main())